apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyy_MM_dd")
}

def ext_android = rootProject.ext.android

def ext_config = rootProject.ext.config

android {
    compileSdkVersion ext_android.compileSdkVersion
    buildToolsVersion ext_android.buildToolsVersion
    defaultConfig {
        applicationId "com.lbx.xviewdemo"
        minSdkVersion ext_android.minSdkVersion
        targetSdkVersion ext_android.targetSdkVersion
        versionCode ext_android.versionCode
        versionName ext_android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //ndk {
        //    //设置支持的SO库架构
        //    abiFilters 'armeabi'// , 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        //}
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }

        //dex 分包
        multiDexEnabled true
    }
    dataBinding {
        enabled true
    }
    lintOptions {
        //不在error情况下中断

        abortOnError false
        //无视字符串缺少本地化的情况
        disable 'MissingTranslation'
        //无视多做了本地化的字符串
        disable 'ExtraTranslation'
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    //signingConfigs {
    //    config {
    //        keyAlias 'easyvideo'
    //        keyPassword 'liboxin'
    //        storeFile file('../key/easyVideo.jks')
    //        storePassword 'liboxin'
    //        v1SigningEnabled true
    //        v2SigningEnabled true
    //    }
    //}
    dexOptions {
        jumboMode ext_config.jumboMode
        preDexLibraries ext_config.preDexLibraries
        maxProcessCount ext_config.maxProcessCount
        javaMaxHeapSize ext_config.javaMaxHeapSize
    }
    sourceSets {
        main {
            res.srcDirs = ['src/main/res', 'src/main/res_overlay']
            //jni.srcDirs = []
            //jniLibs.srcDirs = ['src/main/jniLibs']
            //jniLibs.srcDirs = ['libs']
        }
    }
    //aaptOptions {
    //    additionalParameters '--utf16'
    //}
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //tasks.whenTaskAdded {
            //    task ->
            //        if (task.name.contains("lint")) {
            //            task.enabled = false
            //        }
            //}
            //project.gradle.startParameter.excludedTaskNames.add('lint')
            //aaptOptions {
            //    cruncherEnabled = false
            //}
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all {
                variant ->
                    variant.outputs.all {
                        output ->
                            if (output.outputFile != null && variant.buildType.name.equals("release")) {
                                //此处路径为绝对路径，对应于不同的平台应做相应的修改
                                String os = System.getProperty("os.name");
                                if (os.startsWith("win") || os.startsWith("Win")) {
                                    Properties properties = new Properties()
                                    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream();
                                    properties.load(inputStream)
                                    def path = properties.getProperty('path')
                                    def appName = properties.getProperty('appName')
                                    if (appName == null) {
                                        appName = "app"
                                    }
                                    if (path != null) {
                                        variant.getPackageApplication().outputDirectory =
                                                new File(path + releaseTime())
                                        outputFileName = appName + "_" + ext_android.versionName +
                                                "_" + releaseTime() + ".apk"
                                    } else {

                                    }
                                } else if (os.startsWith("mac") || os.startsWith("Mac")) {

                                }
                            }
                    }
            }
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$ext_android.appcompatVersion"
    implementation "com.android.support:recyclerview-v7:$ext_android.appcompatVersion"
    implementation "com.android.support:design:$ext_android.appcompatVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "org.projectlombok:lombok:1.18.4"
    implementation 'org.glassfish:javax.annotation:10.0-b28'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':xView')
//    implementation 'com.lbx:xView:1.0.2'
}
